[Time Setting]
# Simulation step (to be set based on the value assigned to 'unit_measure'):
dt = 1
# Choose the time unit measure ('s' for seconds, 'm' for minute', and 'h' for hours): 
unit_measure = s
# You can set the 'explicit_clock' feature equal to one of the followng values: [false, fixed, deterministic]. If false, then only the simulation time step 'dt' will be used, otherwise 2 different clocks will be used respectively for the Enode/Base Station (BS) and for the agents. The BS is supposed to have a time clock sampling the env. at higher frequency than the one used by the agents. If 'excplicit_clock' is enabled, then the simulation time step 'dt' will be set equal to the minimum time clock frequency (i.e., the one associated with the BS) in order to be able to perform asyncrhonous actions an communication at simulation time. In this case, the so-called 'explicit_clock' will be the clock system, which is the one allowing to synchronize asyncronous communication and environment observations sampling: it can be 'fixed' (i.e., off-line pre-defined) or 'deterministic' (i.e., trigger-based and varying according to some specific optimization strategy relying on some triggering event). The clock frequency is set by default as follows: 0.5Hz for the BS, 0.25Hz for the agents and 0.1Hz for the system: go through 'global_vars.py' to modify these values manually (remark: not all the frequencies values' combinations are allowed, and they are actually used only if 'explicit_clock' is not set to 'False'). 
explicit_clock = false

[Operative Polygon]
# Minimum area of the random operative polygon: #60000
min_area = 100000
# Maximum area of the random operative polygon: #70000 
max_area = 200000
# 2D verteces of the operative polygon (if set, then 'min_area' and 'max_area' will be ignored). Set it to an empty list (i.e., []) to use the values assigned to 'min_area' and 'max_area'.
# It is a list of tuples, where the tuples indicate the 2D coordinates of the polygon verteces:
polygon_verteces = [(-33.421856769290955, -140.43156798256427), (-104.79202559896153, -94.01970445800383), (-128.55113828097188, -70.8864314233883), (-129.57054237629887, -16.794023316002825), (-115.71859725937767, 90.0885046750376), (-100.17039427597737, 108.35439894051508), (-26.350684100753202, 135.05265480366438), (56.6983746198429, 131.31459477292026), (111.53028194780345, 96.3203210783055), (146.3874558543944, -17.26989376248719), (131.18934208593703, -52.26870263669984), (59.85718206025628, -136.68497926917556), (-33.421856769290955, -140.43156798256427)]
# Set if you want to use the same environment (true) for each new episode or not (false). Same environment means that the shape and the area of operative polygon along with the initial position of both the agents and the audio source will be the same at the beginning of any new episode: 
same_env = false
# Set either an integer number 'N' or 'all' to assume accordingly that either only 'N' points are landable or that all of them are landable (among the ones generated): 
n_landing_points = all
# Desired distance between a landing point and the next one (if it is set equal to the UAVs' footprint_radius, then it will be possible to get 'perfectly' adjacent landing points):
step = 30
# Desired turning angle (degrees) used in the landing points' generation to define a new 'horizontal line' of a landing points once exiting the operative polygon:
deg = 45

[UAVs]
n_uavs = 1
# Flight Levels (FLs) features ('sep_fl' must be such that the number of possible FLs between 'min_fl' and 'max_fl' is not larger than the number of UAVs) [meters]:
min_fl = 1
max_fl = 4
sep_fl = 0.5
# Time associated with the sensing task every time that the considered UAV choose to not to move:
sensing_time = 0
# Either place all the UAVs at the same random start position (true) or spread them out randomly on the map (false):
same_initial_location = true
# Manually set the first location of the UAVs (if set equal to an empty list (i.e., []), then the locations will be randomly generated). Be sure that it matches the number of the agents previously set. It is a list of tuples, where the tuples indicate the 2D coordinates of the locations of the UAVs. If they are set, then the 'same_initial_location' flag will be ignored:
uavs_locations = [(62.85586449489398, -119.21836454696785)]
# Enable or disable the battery consumption:
energy_constraint = false
# Max UAV speed [m/s]:
max_speed = 5
# Max UAV acceleration [m/s^2]:
max_acc = 2
# Minimum deciBel level threshold that the mic mounted on each UAV is able to detect (dB):
min_db_level = 105
# Mean engine power (on an average path at a cruise speed) [KWh]:
p_eng = 10
# Speed reference related to the provided 'p_eng' value [m/s]:
v_ref = 20
# Power battery capacity [KWh]:
p_bat = 9
# Battery charging power [KW]:
p_bat_charging = 4
# Battery efficiency [%]:
b_efficiency = 12
# Battery resolution (i.e., battery observable level precision):
b_res = 5
# Actions can be performed either "instantaneously" (i.e., action_delay=False) or not (i.e., action_delay=True). If you want to consider it also during the learning phase, then you must enable it also in training_parameters.ini file:
action_delay = false
# Observations can be delayed (i.e., observation_delay=False) or not (i.e., observation_delay=True). If you want to consider it also during the learning phase, the you must enable it also in training_parameters.ini file: 
observation_delay = true
# Observations (data) can be lost (i.e., observation_loss=True) or not (i.e., observation_loss=False) --> NOT IMPLEMENTED YET
observation_loss = false 

[Audio Source]
# Static (True) or dynamic (False) source (in terms of motion):
static = true
# Constant (True) or Dynamic (False) source (in terms of signal emission): 
constant = true
# Set the first location of the audio source as a 2D coordinates tuple (if not, set it equal to None and it will be randomly generated): 
source_location = (51.48646156683597, 32.62646123452701)
# source dB level:
source_db_level = 140
# Max source speed (for macro motions like those performed by a car) for trapezoidal speed profile [m/s]:
global_max_speed = 20
# Max source acceleration (for macro motions like those performed by a car) for trapezoidal speed profile [m/s^2]:
global_max_acc = 2.5
# Max source speed (for micro motions like those performed by a human being) for trapezoidal speed profile [m/s]:
local_max_speed = 1.7
# Max source acceleration (for micro motions like those performed by a human being) for trapezoidal speed profile [m/s^2]: 
local_max_acc = 1.1
# Number of macro hotspot to be crossed by the audio source:
n_hotspots = 10
# Minimum number of micro hotspot (around each macro hotspot) to be travelled by the audio source:
n_p_min = 3
# Maximum number of micro hotspot (around each macro hotspot) to be travelled by the audio source:
n_p_max = 7
# Maximum distance that can be traveled by the audio source when it moves among inner-hotspots:
local_d = 50

[Communication]
# Enabled or disable the STAR (Simultaneous Transmit and Receive) Antennas communication ('False' case has not been tested!):
STAR = true
